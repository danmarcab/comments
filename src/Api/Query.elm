-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Query exposing (..)

import Api.InputObject
import Api.Interface
import Api.Object
import Api.Scalar
import Api.ScalarCodecs
import Api.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


type alias FindCommentByIDRequiredArguments =
    { id : Api.ScalarCodecs.Id }


{-| Find a document from the collection of 'Comment' by its id.

  - id - The 'Comment' document's ID

-}
findCommentByID : FindCommentByIDRequiredArguments -> SelectionSet decodesTo Api.Object.Comment -> SelectionSet (Maybe decodesTo) RootQuery
findCommentByID requiredArgs object_ =
    Object.selectionForCompositeField "findCommentByID" [ Argument.required "id" requiredArgs.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias CommentsByDiscussionIdOptionalArguments =
    { size_ : OptionalArgument Int
    , cursor_ : OptionalArgument String
    }


type alias CommentsByDiscussionIdRequiredArguments =
    { discussionId : String }


{-|

  - size\_ - The number of items to return per page.
  - cursor\_ - The pagination cursor.

-}
commentsByDiscussionId : (CommentsByDiscussionIdOptionalArguments -> CommentsByDiscussionIdOptionalArguments) -> CommentsByDiscussionIdRequiredArguments -> SelectionSet decodesTo Api.Object.CommentPage -> SelectionSet decodesTo RootQuery
commentsByDiscussionId fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { size_ = Absent, cursor_ = Absent }

        optionalArgs =
            [ Argument.optional "_size" filledInOptionals.size_ Encode.int, Argument.optional "_cursor" filledInOptionals.cursor_ Encode.string ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "commentsByDiscussionId" (optionalArgs ++ [ Argument.required "discussionId" requiredArgs.discussionId Encode.string ]) object_ identity


type alias AllCommentsOptionalArguments =
    { size_ : OptionalArgument Int
    , cursor_ : OptionalArgument String
    }


{-|

  - size\_ - The number of items to return per page.
  - cursor\_ - The pagination cursor.

-}
allComments : (AllCommentsOptionalArguments -> AllCommentsOptionalArguments) -> SelectionSet decodesTo Api.Object.CommentPage -> SelectionSet decodesTo RootQuery
allComments fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { size_ = Absent, cursor_ = Absent }

        optionalArgs =
            [ Argument.optional "_size" filledInOptionals.size_ Encode.int, Argument.optional "_cursor" filledInOptionals.cursor_ Encode.string ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "allComments" optionalArgs object_ identity
